"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const abiParser_1 = require("./abiParser");
const utils_1 = require("./utils");
const typeParser_1 = require("./typeParser");
function generateSource(abi, context) {
    const parsedContractAbi = abiParser_1.parse(abi);
    return codeGenForContract(abi, parsedContractAbi, context);
}
exports.generateSource = generateSource;
// @todo better typings for web3
function codeGenForContract(abi, input, context) {
    const typeName = `${context.fileName}`;
    const constructorParams = input.constructor.inputs
        .map(codeGenForParams)
        .concat("options?: any")
        .join(", ");
    return `/* GENERATED BY TYPECHAIN VER. ${utils_1.getVersion()} */
/* tslint:disable */
import { Transaction, Receipt, ReceiptLog, Event, EventArgs, TruffleContract } from "./typechain-runtime";

// Types for view functions
${input.constantFunctions.map(generateViewFunctionType).join(";\n\n")}

// Types for functions
${input.functions.map(generateFunctionType).join(";\n\n")}

export declare class ${typeName} extends TruffleContract {
    static new(${constructorParams}): Promise<${typeName}>
    static at(address: string): Promise<${typeName}>
    static deployed(): Promise<${typeName}>

    // View functions
    ${input.constantFunctions.map(generateFunctionDeclaration).join(";\n")}

    // Functions
    ${input.functions.map(generateFunctionDeclaration).join(";\n")}
  }`;
}
function codeGenForParams(param, index) {
    return `${param.name || `arg${index}`}: ${param.type.generateCodeForInput()}`;
}
function codeGenForArgs(param, index) {
    const isArray = param.type instanceof typeParser_1.ArrayType;
    const paramName = param.name || `arg${index}`;
    return isArray ? `${paramName}.map(val => val.toString())` : `${paramName}.toString()`;
}
function codeGenForOutputTypeList(output) {
    if (output.length === 1) {
        return output[0].generateCodeForOutput();
    }
    else {
        return `[${output.map(x => x.generateCodeForOutput()).join(", ")}]`;
    }
}
function generateViewFunctionType(constantFunction) {
    const params = `(${constantFunction.inputs
        .map(codeGenForParams)
        .join(", ")})`;
    const outputs = codeGenForOutputTypeList(constantFunction.outputs);
    const functionHeader = `${params}: Promise<${outputs}>`;
    const functionType = `${params} => Promise<${outputs}>`;
    return `interface ${constantFunction.name}Type {
    ${functionHeader};
    call: ${functionType};
  };`;
}
function generateFunctionType(func) {
    const params = `(${func.inputs
        .map(codeGenForParams)
        .concat("options?: any")
        .join(", ")})`;
    const outputs = codeGenForOutputTypeList(func.outputs);
    const functionHeader = `${params}: Promise<Transaction>`;
    const functionType = `${params} => Promise<${outputs}>`;
    return `interface ${func.name}Type {
    ${functionHeader};
    call: ${functionType};
  };`;
}
function generateFunctionDeclaration(func) {
    return `public ${func.name}: ${func.name}Type`;
}
